     1                                 %line 1+1 sortSI.asm
     2                                 
     3                                 
     4                                 
     5                                 [section .data]
     6 00000000 37000000000000005F-     array dq 55, 95, 25, 75, 10
     7 00000000 000000000000001900-
     8 00000000 0000000000004B0000-
     9 00000000 00000000000A000000-
    10 00000000 00000000           
    11 00000028 0500000000000000        length dq 5
    12 00000030 0000000000000000        min dq 0
    13 00000038 0000000000000000        max dq 0
    14 00000040 0000000000000000        med1 dq 0
    15 00000048 0000000000000000        med2 dq 0
    16                                 
    17                                 [section .bss]
    18 00000000 <gap>                   small resq 1
    19                                 
    20                                 
    21                                 [section .text]
    22                                 [global _start]
    23                                 _start:
    24                                 
    25                                 
    26 00000000 48C7C7[00000000]        mov rdi, array
    27 00000007 488B3425[00000000]      mov rsi, qword[length]
    28 0000000F 48C7C2[00000000]        mov rdx, small
    29 00000016 E82C000000              call arraySort
    30 0000001B 48C7C2[00000000]        mov rdx, min
    31 00000022 48C7C1[00000000]        mov rcx, max
    32 00000029 49C7C0[00000000]        mov r8, med1
    33 00000030 49C7C1[00000000]        mov r9, med2
    34 00000037 E861000000              call sort
    35                                 
    36                                 end_prog:
    37 0000003C 48C7C03C000000          mov rax, 60
    38 00000043 48C7C700000000          mov rdi, 0
    39 0000004A 0F05                    syscall
    40                                 
    41                                 
    42                                 
    43                                 
    44                                 [global arraySort]
    45                                 arraySort:
    46 0000004C 55                      push rbp
    47 0000004D 4889E5                  mov rbp, rsp
    48 00000050 49C7C200000000          mov r10, 0
    49 00000057 49C7C300000000          mov r11, 0
    50 0000005E 4154                    push r12
    51 00000060 4155                    push r13
    52                                 
    53                                 
    54                                 iLoop:
    55 00000062 4A8B14D7                mov rdx, qword[rdi+r10*8]
    56 00000066 4D89D4                  mov r12, r10
    57 00000069 4D89D3                  mov r11, r10
    58                                 
    59                                 
    60                                 jLoop:
    61 0000006C 4A3914DF                cmp qword[rdi+r11*8], rdx
    62 00000070 7C1C                    jl sortSmall
    63                                 afterSort:
    64 00000072 49FFC3                  inc r11
    65 00000075 4939F3                  cmp r11, rsi
    66 00000078 75F0                    jne jLoop
    67                                 
    68 0000007A 4E8B2CD7                mov r13, qword[rdi+r10*8]
    69 0000007E 4E892CE7                mov qword[rdi+r12*8], r13
    70 00000082 4A8914D7                mov qword[rdi+r10*8], rdx
    71 00000086 49FFC2                  inc r10
    72 00000089 4939F2                  cmp r10, rsi
    73 0000008C 75D2                    jne iLoop
    74                                 
    75 0000008E EB07                   jmp funcEnd
    76                                 
    77                                 sortSmall:
    78 00000090 4A8B14DF                mov rdx, qword[rdi+r11*8]
    79 00000094 4D89DC                  mov r12, r11
    80 00000097 EBD7                    jmp afterSort
    81                                 
    82                                 funcEnd:
    83 00000099 415D                    pop r13
    84 0000009B 415C                    pop r12
    85 0000009D 4889EC                  mov rsp, rbp
    86 000000A0 5D                      pop rbp
    87 000000A1 C3                      ret
    88                                 
    89                                 [global sort]
    90                                 
    91                                 sort:
    92 000000A2 488B17                 mov rdx, qword[rdi]
    93 000000A5 488B0CF7               mov rcx, qword[rdi + rsi*8]
    94                                 
    95 000000A9 48C7C200000000         mov rdx, 0
    96 000000B0 55                     push rbp
    97 000000B1 48C7C502000000         mov rbp, 2
    98 000000B8 4889F0                 mov rax, rsi
    99 000000BB 48F7F5                 div rbp
   100                                 
   101 000000BE 4883FA00               cmp rdx, 0
   102 000000C2 740B                   je even
   103                                 
   104                                 odd:
   105 000000C4 4C8B04C7                mov r8, qword[rdi + rax *8]
   106 000000C8 49C7C100000000          mov r9, 0
   107 000000CF EB07                    jmp funcEnd1
   108                                 even:
   109 000000D1 4C8B04C7                mov r8, qword[rdi + rax *8]
   110 000000D5 4C8B4C0708              mov r9, qword[rdi + rax+1 *8]
   111                                 
   112                                 funcEnd1:
   113 000000DA 5D                      pop rbp
   114 000000DB C3                      ret
